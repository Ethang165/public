module openconfig-flexalgo {
  yang-version 1.1;
  namespace "http://openconfig.net/yang/flexalgo";
  prefix "oc-flexalgo";

  import openconfig-extensions {
    prefix oc-ext;
  }
  oc-ext:openconfig-version "0.1.0";

  organization
    "OpenConfig working group";
  contact
    "OpenConfig working group
    www.openconfig.net ";
  description
    "This YANG module defines the configurational and operational
    parameters related to IGP Flex-Algorithms";

  revision 2021-12-20 {
    description
      "Initial revision of flexalgo module";
    reference
      "0.1.0";
  }

  /* Types definitions */

  typedef flex-algo-metric-type {
    type enumeration {
      enum IGP {
        value 0;
        description
          "IGP metric to be used during the calculation.";
      }
      enum MIN_DELAY {
        value 1;
        description
          "Min Unidirectional Link Delay as defined in [RFC7810] to
           be used during the calculation.";
      }
      enum TE_METRIC {
        value 2;
        description
          "TE default metric as defined in [RFC5305] to be used
           during the calculation.";
      }
    }
    description
      "Type of metric to be used during a Flex Algo path
       computation";
  }

  typedef flex-algo-id {
    type uint8 {
      range "128..255";
    }
    description
      "Flex-Algorithm identifies which algorithm should be used during
       path computation";
  }

  typedef flex-algo-calc-type {
    type uint8 {
      range "0..127";
    }
    default "0";
    description
      "Calculation type value ranges from 0 to 127 both inclusive
       from the IGP Algorithm Types registry defined under
       Interior Gateway Protocol (IGP)
       Parameters IANA registries.
       If the required calculation type is Shortest Path First,
       the value 0 SHOULD appear in this field.";
  }

  typedef bit-position {
    type uint8 {
      range "0..31";
    }
    description
      "A bit position in a 32 bit field, used for specifying
       legacy administrative groups.";
  }

  grouping algorithm-attributes {
    description
      "All of the possible attributes for an flexible algorithm
       definition";
    leaf name {
      type string;
      description
        "Flexible Algorithm name";
    }
    leaf flex-algo-id {
      type flex-algo-id;
      mandatory true;
      description
        "Flex Algorithm Identifier";
    }
    leaf metric-type {
      type flex-algo-metric-type;
      default "IGP";
      description
        "Indicates which is the corresponding metric type for
         this algorithm";
    }
    leaf calc-type {
      type flex-algo-calc-type;
      description
        "Indicates the calculation type, if advertised";
    }
    leaf priority {
      type uint8;
      default "237";
      description
        "Indicates the priority for this algorithm";
    }

    leaf-list exclude-group {
      type bit-position;
      description
        "List of admin-groups to exclude in path calculation.";
    }
    leaf-list include-all-group {
      type bit-position;
      description
        "list of admin-groups, all of which must be included";
    }
    leaf-list include-any-group {
      type bit-position;
      description
        "list of admin-groups, one of which must be included";
    }

    leaf-list srlg-names {
      type leafref {
        path "../../../../mpls/te-global-attributes/srlgs/srlg/name";
      }
      description
        "list of references to named SRLGs to be excluded";
    }

    leaf-list srlg-values {
      type uint32;
      description
        "list of references to SRLG values to be excluded";
    }

    leaf color {
      type uint32;
      description
        "When a flexalgo tunnel is used for RIB resolution, the flexalgo can 
        be configured with a specific color (which may be specified based on 
        a BGP extended color community)";
    }
  }

  grouping fad-definition-top {
    description
      "Top level grouping for Flexible Algorithm Definitions";
    container flex-algorithms {
      description
        "Flexible Algorithms and their definitions";
      list algorithm {
        key "name";
        description
          "List of Flexible Algorithms";
        leaf name {
          type leafref {
            path "../config/name";
          }
          description
            "Name for a Flexible Algorithm";
        }
        container config {
          description
            "Attributes for a Flexible Algorithm";
          uses algorithm-attributes;
        }
        container state {
          config false;
          description
            "Attributes for a Flexible Algorithm";
          uses algorithm-attributes;
        }
      }
    }
  }
}

